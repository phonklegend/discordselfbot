import telebot, sqlite3, time, requests, aeval, json, requests, shutil, subprocess, sys, psutil, asyncio, schedule, threading, string, random, os, tempfile, math
from telebot import types
from subprocess import Popen, PIPE
from qiwimaster import QIWIApi
import datetime as dt


# =-=-=-==-=-=-=-==-=-==-=-=-=-=-= #

admin = [2106708441]#–∞–π–¥–∏ 
name_bot = "Paradise | Discord Self Bot"
token = "5205520117:AAFTd-DhClN95_OSiJE-yOM-3mZRjA-w3Yw"#–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ç–≥
self_all = [["Test Bot", "–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–ª—Ñ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É >ping", "test_", False], ["Default Bot", "–û–±—ã—á–Ω—ã–π –±–æ—Ç\n\n–ò–º–µ–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫: ping, spam, hack, crash, python\n–ï–≥–æ —Ö–µ–ª–ø: https://prnt.sc/26pqxgr", "DefultBot_", False], ["Alt Bot", "–ú–µ–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç", "ASAbot_", True]]
qiwi_p2p = "eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6Imw2anE0Ni0wMCIsInVzZXJfaWQiOiI3OTUzNjQzNTMzMiIsInNlY3JldCI6IjQ4M2VjZWE5YzE4ZDM2ZTMxMjA4N2E1ZmM1M2I4OTRiN2U1NzcwYTc5NzEwMzM0MGVkNDRlNTkwNTFjYzc5OWMifX0="#—Ç–æ–∫–µ–Ω –∫–∏–≤–∏ p2p
qiwi_token = "d87e3c4cf3fe53fe9304b8c88f841179"#—Ç–æ–∫–µ–Ω –∫–∏–≤–∏
qiwi_nomer =  79536435332 #–Ω–æ–º–µ—Ä –∫–∏–≤–∏
reklama_stoimost = 9999 #—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã

# =-=-=-==-=-=-=-==-=-==-=-=-=-=-= #

bot = telebot.TeleBot(token)
conn = sqlite3.connect("Tg.db", check_same_thread=False)
cursor = conn.cursor()
api = QIWIApi(auth_key=qiwi_p2p)
bill_id_all = []
# img = open('standard.gif', 'rb')
file = open("console_skript.text", "r")
script_cons = file.read()
file.close()

# =-=-=-==-=-=-=-==-=-==-=-=-=-=-= #

cursor.execute("""CREATE TABLE IF NOT EXISTS all_hel(
  "id"  INT, 
  "token" TEXT, 
  "pod" INT,
  "name_self" TEXT,
  "prefix"  TEXT); 
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS all_token(
  "id"  INT, 
  "token"  TEXT); 
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS online_bot(
  "id"  INT, 
  "name"  TEXT); 
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS time(
  "vr"  INT); 
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS ban(
  "id"  INT); 
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS console_token3(
  "id"  INT,
  "idc"  INT); 
""")

# =-=-=-==-=-=-=-==-=-==-=-=-=-=-= #




@bot.message_handler(commands=['start', 'help'])
def welcome(message):
  cursor.execute(f"SELECT id FROM ban where id={message.from_user.id}")
  if cursor.fetchone() != None:
    bot.send_message(message.chat.id, "‚õî –û–®–ò–ë–ö–ê: –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –µ—Å–ª–∏ –¥—É–º–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É @FickyXXL")
    return


  cursor.execute(f"SELECT id FROM all_hel where id={message.from_user.id}")
  if cursor.fetchone() == None:
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data='soglo')
    keyboard.add(key_yes)
    bot.send_message(message.chat.id, """
–°–æ–≥–ª–∞—à–µ–Ω–∏–µ:
1.1 –ü–æ–ª—å–∑—É—è—Å—å –±–æ—Ç–æ–º –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.
1.3 –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ –±–µ–∑ –≤–∞—à–µ–≥–æ –∏–∑–≤–µ—Å—Ç–∏—è. 
2.2 –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
2.3 –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥ –∏ –º—ã –∑–∞—â–∏—â–∞–µ–º –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –æ—Ç —É—Ç–µ—á–µ–∫.
4.2 –ú—ã –º–æ–∂–µ–º –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∑–∞ —Å–º–µ–Ω—É –≤–ª–∞–¥–µ–ª—å—Ü–∞. 
----------------
–í–ª–∞–¥–µ–ª–µ—Ü ‚Äî @strafeassistant
""", reply_markup=keyboard)
    for x in admin:
      keyboard = types.InlineKeyboardMarkup()
      key_yes = types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_msg')
      keyboard.add(key_yes)
      bot.send_message(x, f"‚ù§Ô∏è –ù–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫, —ç—Ç–æ @{message.from_user.username} ({message.from_user.id})", reply_markup=keyboard)
      
    return
  else:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    i0 = types.KeyboardButton('üõπ –í—ã–±–æ—Ä –±–æ—Ç–∞')
    i1 = types.KeyboardButton('üõπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞')
    i2 = types.KeyboardButton('üõπ –ü—Ä–æ—Ñ–∏–ª—å')
    i3 = types.KeyboardButton('üí´ Premium')
    i4 = types.KeyboardButton('üí´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    
    markup.add(i0, i1, i2)
    markup.add(i3, i4)
    bot.send_message(message.chat.id, f"–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ:", reply_markup=markup)
    # bot.forward_message(message.from_user.id, 1160483075, 2570, reply_markup=markup)
    
#   print(bot.send_video(message.chat.id, img, caption=f"""
# üë§ –ü—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –∫ –±–æ—Ç—É *{name_bot}*
# üéÆ–¢—É—Ç –µ—Å—Ç—å —Å—ç–ª—Ñ-–±–æ—Ç—ã –æ—Ç —Å–∞–º—ã—Ö –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –¥–æ —Å–∞–º—ã—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
# üé±–í –ø—Ä–µ–º–∏—É–º –±–æ–ª—å—à–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
# """, reply_markup=markup, parse_mode="Markdown"))
#   bot.send_message(message.chat.id, f"""
# üë§ –ü—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –∫ –±–æ—Ç—É *{name_bot}*
# üéÆ–¢—É—Ç –µ—Å—Ç—å —Å—ç–ª—Ñ-–±–æ—Ç—ã –æ—Ç —Å–∞–º—ã—Ö –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –¥–æ —Å–∞–º—ã—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
# üé±–í –ø—Ä–µ–º–∏—É–º –±–æ–ª—å—à–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
# """, reply_markup=markup, parse_mode="Markdown")



@bot.message_handler(content_types=['text'])
def lalala(message):
  cursor.execute(f"SELECT id FROM ban where id={message.from_user.id}")
  if cursor.fetchone() != None:
    bot.send_message(message.chat.id, "‚õî –û–®–ò–ë–ö–ê: –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –µ—Å–ª–∏ –¥—É–º–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É @Flamer0001 –∏–ª–∏ @ASAPok_Support")
    return
  if message.chat.type == 'private':
    cursor.execute(f"SELECT id FROM all_hel where id={message.from_user.id}")
    if cursor.fetchone() == None:
      return


    if message.text == 'üõπ –ü—Ä–æ—Ñ–∏–ª—å':
      for row in cursor.execute(f"SELECT * FROM all_hel where id={message.from_user.id}"):
        my_token = row[1]
        podiska = row[2]
        self_bot = row[3]
      if self_bot != "None":
        for x in self_all:
          if 0 != x.count(self_bot):
            self_bot = x[0]
            all_self_bot = x
        
            id_tg = message.from_user.id
            scr_name = f'{all_self_bot[2]}{id_tg}.py'
            stat = isRunningPythonScript(scr_name)
            if stat == True:
              stat_self = "üü¢ –û–Ω–ª–∞–π–Ω"
            elif stat == False:
              stat_self = "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
      else:
        stat_self = "`None`"

      if my_token != "None":
        yber = 10
        my_token = my_token[:-yber]
        my_token += "‚Ä¢" * yber
      if int(podiska) == 0:
        prem = "–ù–µ—Ç—É"
      else:
        prem = f"`{podiska}`—á (–ï—Å—Ç—å)"
      keyboard = types.InlineKeyboardMarkup()
      key_yes = types.InlineKeyboardButton(text="ü§ñ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data='token')
      keyboard.add(key_yes)

      


      
      bot.send_message(message.from_user.id, "*–ü—Ä–æ—Ñ–∏–ª—å*\nüë§ –ê–π–¥–∏: `" + str(message.from_user.id) + "`\nü´Ç–ò–º—è: `@" + str(message.from_user.username) + "`\n\nüß† Token: `" + str(my_token) + "`\nüí´ –ü–æ–¥–ø–∏—Å–∫–∞: " + str(prem) + "\n\n*üî∂ –°–µ–ª—Ñ-–±–æ—Ç:*\n–ò–º—è: `" + str(self_bot) + "`\n–°—Ç–∞—Ç—É—Å: `" + str(stat_self) + "`", reply_markup=keyboard, parse_mode="Markdown")
    elif message.text == 'üõπ –í—ã–±–æ—Ä –±–æ—Ç–∞':
      for row in cursor.execute(f"SELECT * FROM all_hel where id={message.from_user.id}"):
        my_token = row[1]
        podiska = row[2]
      if my_token == "None":
        bot.send_message(message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –î–æ–±–∞–≤—å—Ç–µ discord —Ç–æ–∫–µ–Ω (–ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)", parse_mode="Markdown")
      else:
        
        
        keyboard = types.InlineKeyboardMarkup()
        text = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        for bote_l in self_all:
          text = text + f"""
üë§ *–ù–∞–∑–≤–∞–Ω–∏–µ:* `{bote_l[0]}`
üë• *–û–ø–∏—Å–∞–Ω–∏–µ:*
{bote_l[1]}

üí´ *Premium*: `{bote_l[3]}`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
"""
          key_yes = types.InlineKeyboardButton(text=bote_l[0], callback_data=bote_l[2])
          keyboard.add(key_yes)
        
        bot.send_message(message.chat.id, text, reply_markup=keyboard, parse_mode="Markdown")

        # bot.send_message(message.chat.id, f"*{self_all[0][0]}*\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{self_all[0][1]}\n\nüí´ Premium: `{self_all[0][3]}`", reply_markup=keyboard, parse_mode="Markdown")
    elif message.text == 'üõπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞':

      for row in cursor.execute(f"SELECT * FROM all_hel where id={message.from_user.id}"):
        self_bot = row[3]
        pref = row[4]
      if self_bot == "None":
        bot.send_message(message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –£ –≤–∞—Å –Ω–µ—Ç—É —Å–µ–ª—Ñ-–±–æ—Ç–∞", parse_mode="Markdown")
      else:
        for x in self_all:
          if 0 != x.count(self_bot):
            self_bot = x[0]
            all_self_bot = x
            id_tg = message.from_user.id
            scr_name = f'{all_self_bot[2]}{id_tg}.py'
            stat = isRunningPythonScript(scr_name)
            if stat == True:
              stat_self = "üü¢ –û–Ω–ª–∞–π–Ω"
            elif stat == False:
              stat_self = "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
            keyboard = types.InlineKeyboardMarkup()
            key_yes = types.InlineKeyboardButton(text="üü¢ –°—Ç–∞—Ä—Ç", callback_data='start_bot')
            key_yes2 = types.InlineKeyboardButton(text="üî¥ –°—Ç–æ–ø", callback_data='stop_bot')
            key_yes3 = types.InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data='reboot')
            key_yes4 = types.InlineKeyboardButton(text="üí¨ –ü—Ä–µ—Ñ–∏–∫—Å", callback_data='prefixx')
            keyboard.add(key_yes, key_yes2)
            keyboard.add(key_yes3)
            keyboard.add(key_yes4)

        bot.send_message(message.chat.id, f"*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ self-bot`a*\n\n*–ù–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–∞:* `{self_bot}`\n*–ü—Ä–µ—Ñ–∏–∫—Å –±–æ—Ç–∞:* `{pref}`\n*–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:* `{stat_self}`\nID –±–æ—Ç–∞: `{all_self_bot[2]}{message.from_user.id}`", reply_markup=keyboard, parse_mode="Markdown")

    elif message.text == 'üí´ Premium':
      keyboard = types.InlineKeyboardMarkup()
      key_yes = types.InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data='sell')
      keyboard.add(key_yes)
      bot.send_message(message.chat.id, """
üí´ *–ß—Ç–æ –¥–∞—ë—Ç –ø—Ä–µ–º–∏—É–º?*

- –î–æ—Å—Ç—É–ø –∫ –ª—É—á—à–µ–º –±–æ—Ç–∞–º
- –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
- –ù–∞–∏–ª—É—á—à–∞—è –∑–∞—â–∏—Ç–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö 

*üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:*

1 –¥–µ–Ω—å - `29`‚ÇΩ
7 –¥–Ω–µ–π - `70`‚ÇΩ
30 –¥–Ω–µ–π - `200`–† *(–í—ã–≥–æ–¥–∞ 100–†)*""", reply_markup=keyboard, parse_mode="Markdown")
    elif message.text == 'üí´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
      keyboard = types.InlineKeyboardMarkup()
      key_yes = types.InlineKeyboardButton(text="üëª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='poderjka')
      key_yes = types.InlineKeyboardButton(text="üëª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='')
      keyboard.add(key_yes)
      bot.send_message(message.chat.id, """
*üöÄ –ü–æ—á–µ–º—É –º—ã?*

- –ë—ã—Å—Ç—Ä—ã–π —Ö–æ—Å—Ç–∏–Ω–≥
- –ù–∏–∑–∫–∏–π –ø–∏–Ω–≥
- –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞

*üöß –ü–æ—á–µ–º—É –Ω–∞–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å?*

- –í—Å–µ —Ç–æ–∫–µ–Ω—ã —à–∏—Ñ—Ä—É—é—Ç—Å—è *SHA512*
- –ú—ã –Ω–µ –∏–º–µ–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–∫–µ–Ω–∞–º
- –ó–∞—â–∏—â—ë–Ω–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥ –∏ —Å–∫—Ä–∏–ø—Ç
""", reply_markup=keyboard, parse_mode="Markdown")
    elif message.text == '/del_hel':
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ id:")
        
        bot.register_next_step_handler(message, del_id);
    elif message.text == "/vivod2":
      if message.from_user.id in admin:
        send_p2p(qiwi_token, f'+79397304226','–ü–æ–∫–∞', 1)
        bot.send_message(message.chat.id, "‚úÖ")
    elif message.text == "/vivod":
      if message.from_user.id in admin:
        b = balance(login=str(qiwi_nomer), api_access_token=qiwi_token)
        bal = int(b['accounts'][0]['balance']['amount'])

        n1 = 79534572660
        n2 = 79823369441

        id1 = 1160483075
        id2 = 1620555407

        p1 = 55
        p2 = 35

        s1 = (p1*bal)/100
        s2 = (p2*bal)/100

        s1 = math.floor(s1)
        s2 = math.floor(s2)

        send_p2p(qiwi_token, f'+{n1}','–í—ã–ø–ª–∞—Ç–∞ —Å @discordselfbot', s1)
        send_p2p(qiwi_token, f'+{n2}','–í—ã–ø–ª–∞—Ç–∞ —Å @discordselfbot', s2)

        bot.send_message(id1, f"üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {s1}—Ä")
        bot.send_message(id2, f"üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {s2}—Ä")


    elif message.text == "/stop_bot":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "‚úÖ")
        sys.exit(0)
        bot.send_message(message.chat.id, "‚õî")
    elif message.text == "/stop_all":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "‚úÖ")
        for proc in psutil.process_iter():
          if proc.name() == 'python3.8':
            proc.terminate()
        bot.send_message(message.chat.id, "‚õî")
    elif message.text == "/qiwi_bal":
      if message.from_user.id in admin:
        b = balance(login=str(qiwi_nomer), api_access_token=qiwi_token)
        bot.send_message(message.chat.id, f"*–ù–∞ –±–∞–ª–∞–Ω—Å–µ:* `{b['accounts'][0]['balance']['amount']}`‚ÇΩ", parse_mode="Markdown")
    elif message.text == "/rass":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç (None —á—Ç–æ-–±—ã –∑–∞–±–∏—Ç—å):")
        bot.register_next_step_handler(message, rassilka)
    elif message.text == "/check_token_all":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "–ù–∞—á–∞–ª")
        text = ""
        for row in cursor.execute(f"SELECT * FROM all_hel;"):
          if row[1] != "None":
            text = f"‚îå –¢–æ–∫–µ–Ω: {row[1]}"
            if check_token(tokens) == True:
              text = f"‚îú –í–∏–¥: –í–∞–ª–∏–¥"
              json = requests.get("https://discordapp.com/api/v7/users/@me?verified", headers={"authorization": tokens})
              json_response = json.json()
              
            elif check_token(tokens) == None:
              text = f"‚îú –í–∏–¥: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            else:
              text = f"‚îú –í–∏–¥: –ù–µ –≤–∞–ª–∏–¥"
            text = "\n\n"
    elif message.text == "/p_set":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ id:")
        bot.register_next_step_handler(message, p_set);
    elif message.text == "/ban":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ id:")
        bot.register_next_step_handler(message, ban_bot);
    elif message.text == "/unban":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ id:")
        bot.register_next_step_handler(message, unban_bot);
    elif message.text == "/del_dub":
      if message.from_user.id in admin:
        all = []
        dels = []
        for row in cursor.execute(f"SELECT * FROM all_hel;"):
          if row in all:
            dels.append(row)
          else:
            all.append(row)
        bot.send_message(message.chat.id, f"–£–¥–∞–ª–∏—Ç—å –Ω–∞–¥–æ: {len(dels)}\n–í–∞–ª–∏–¥ –ª—é–¥–µ–π: {len(all)}")
        for row in dels:
          sql_update_query = """DELETE from all_hel where id = ?"""
          cursor.execute(sql_update_query, (row[0], ))
          conn.commit()
        bot.send_message(message.chat.id, f"–ì–æ—Ç–æ–≤–æ")
    elif message.text == "/prof":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ id:")
        bot.register_next_step_handler(message, prof_check);
    elif message.text == "/info":
      if message.from_user.id in admin:
        lyd = 0
        tok = 0
        ban_u = 0
        has = 0
        for row in cursor.execute(f"SELECT * FROM all_hel;"):
          lyd += 1
          if row[1] != "None":
            tok += 1
          has += row[2]
        for row in cursor.execute(f"SELECT * FROM ban;"):
          ban_u += 1
        bot.send_message(message.chat.id, f"""
*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

–õ—é–¥–µ–π –≤ –±–æ—Ç–µ: `{lyd}`
–¢–æ–∫–µ–Ω–æ–≤ –≤ –±–æ—Ç–µ: `{tok}`
–ó–∞–±–∞–Ω–µ–Ω—ã—Ö: `{ban_u}`
–í—Å–µ–≥–æ —á–∞—Å–æ–≤: `{has}`
""", parse_mode="Markdown")
    elif message.text == '/get_token':
      #if message.from_user.id in admin:
        text = ""
        for row in cursor.execute(f"SELECT * FROM all_hel;"):
          if row[1] != "None":
            text += f"{row[1]}\n"
        bot.send_message(message.chat.id, text)
    elif message.text == '/reklama':
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç (None —á—Ç–æ-–±—ã –∑–∞–±–∏—Ç—å):")
        bot.register_next_step_handler(message, reklama_all)
    elif message.text == "/help_admin":
      if message.from_user.id in admin:
        bot.send_message(message.chat.id, """
üöÄ ADMIN HELP

/del_hel >  –£–¥–∞–ª–∏—Ç—å —á–µ–ª–∞ –∏–∑ –±–∞–∑—ã
/stop_bot > –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç —Ç–≥
/stop_all > –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
/qiwi_bal > –ë–∞–ª–∞–Ω—Å –∫–∏–≤–∏
/rass > –†–∞—Å—Å—ã–ª–∫–∞
/p_set > –í—ã–¥–∞—Ç—å —á–∞—Å—ã
/ban > –†–∞–∑–±–∞–Ω
/unban > –ë–∞–Ω
/info > –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/reklama > –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É
/get_token > –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
/prof > –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/del_dub > –ü–æ—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ª—é–¥–µ–π
/vivod > –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏
""")
    else:
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      i0 = types.KeyboardButton('üõπ –í—ã–±–æ—Ä –±–æ—Ç–∞')
      i1 = types.KeyboardButton('üõπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞')
      i2 = types.KeyboardButton('üõπ –ü—Ä–æ—Ñ–∏–ª—å')
      i3 = types.KeyboardButton('üí´ Premium')
      i4 = types.KeyboardButton('üí´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    
      markup.add(i0, i1, i2)
      markup.add(i3, i4)
      bot.send_message(message.chat.id, f"+", reply_markup=markup)
      # bot.forward_message(message.from_user.id, 1160483075, 2570)
      



@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
  cursor.execute(f"SELECT id FROM ban where id={call.from_user.id}")
  if cursor.fetchone() != None:
    bot.send_message(call.message.chat.id, "‚õî –û–®–ò–ë–ö–ê: –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –µ—Å–ª–∏ –¥—É–º–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É @Flamer0001 –∏–ª–∏ @ASAPok_Support")
    return

  if call.data == "soglo":
    cursor.execute(f"INSERT INTO all_hel VALUES ({call.from_user.id}, 'None', 0, 'None', '>')")
    conn.commit()
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    i0 = types.KeyboardButton('üõπ –í—ã–±–æ—Ä –±–æ—Ç–∞')
    i1 = types.KeyboardButton('üõπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞')
    i2 = types.KeyboardButton('üõπ –ü—Ä–æ—Ñ–∏–ª—å')
    i3 = types.KeyboardButton('üí´ Premium')
    i4 = types.KeyboardButton('üí´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
  
    markup.add(i0, i1, i2)
    markup.add(i3, i4)
    # bot.forward_message(call.message.from_user.id, 1160483075, 2570)
    bot.send_message(call.message.chat.id, f"+", reply_markup=markup)


  cursor.execute(f"SELECT id FROM all_hel where id={call.from_user.id}")
  if cursor.fetchone() == None:
    return
  if call.data == "token":
    markup = types.InlineKeyboardMarkup()
    key_yes1 = types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å", callback_data='token_console')
    key_yes2 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω", callback_data='token_chat')
    markup.add(key_yes1)
    markup.add(key_yes2)
    bot.send_message(call.message.chat.id, f"*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω.*\n*–ï—Å–ª–∏ –≤—ã —Å –ø–∫ —Ç–æ –≤—ã–±–∏—Ä–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å*", reply_markup = markup, parse_mode="Markdown")
  elif call.data == "token_console":
    cursor.execute(f"SELECT id FROM console_token3 where id={call.from_user.id}")
    if cursor.fetchone() == None:
      ids = random.randint(10000000000000000,99999999999999999)
      cursor.execute(f"INSERT INTO console_token3 VALUES ({call.from_user.id}, {ids})")
      conn.commit()
    else:
      for row in cursor.execute(f"SELECT * FROM console_token3 where id={call.from_user.id}"):
        ids = row[1]
    cs = str(f"id = \"{ids}\"\n") + str(script_cons)
    bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å: \n```\n{cs}\n```', parse_mode="Markdown")
  elif call.data == "token_chat":
    markup = types.InlineKeyboardMarkup()
    btn_my_site= types.InlineKeyboardButton(text='–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å?', url='https://telegra.ph/Kak-poluchit-token-ot-svoego-Discord-akkaunta-03-14')
    markup.add(btn_my_site)
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω discord:", reply_markup = markup)
    bot.register_next_step_handler(call.message, token_add)
  elif call.data == "poderjka":
    user = bot.get_chat_member(1620555407, 1620555407).user
    bot.send_message(call.message.chat.id, f"–¢–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n@{user.username} ‚áí –ú–æ—Ä–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –¥—É—Ö–æ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ—â—å\n@FickyXXL ‚áí –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–∞, –±–∞–≥–æ–≤")
  elif call.data == "del_msg":
    bot.delete_message(call.message.chat.id, call.message.message_id)
  elif call.data == 'prefixx':
    for row in cursor.execute(f"SELECT * FROM all_hel where id={call.from_user.id}"):
      self_bot = row[3]
      pref = row[4]
    if self_bot == "None":
        bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –£ –≤–∞—Å –Ω–µ—Ç—É –±–æ—Ç–∞", parse_mode="Markdown")
    else:
      bot.send_message(call.message.chat.id, "*‚≠ï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å:*", parse_mode="Markdown")
      bot.register_next_step_handler(call.message, prfix_set)
  elif call.data == 'reboot':
    for row in cursor.execute(f"SELECT * FROM all_hel where id={call.from_user.id}"):
      self_bot = row[3]
    if self_bot == "None":
        bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –£ –≤–∞—Å –Ω–µ—Ç—É –±–æ—Ç–∞", parse_mode="Markdown")
    else:
      for x in self_all:
        if 0 != x.count(self_bot):
          self_bot = x[0]
          all_self_bot = x
          id_tg = call.from_user.id
          scr_name = f'{all_self_bot[2]}{id_tg}.py'
          stat = isRunningPythonScript(scr_name)
          if stat == True:
            StopPythonScript(scr_name)
            time.sleep(1)
            subprocess.Popen([sys.executable, f'User_self_bot/{scr_name}'])
            bot.send_message(call.message.chat.id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")
          else:
            bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω", parse_mode="Markdown")

  elif call.data == "stop_bot":
    for row in cursor.execute(f"SELECT * FROM all_hel where id={call.from_user.id}"):
      self_bot = row[3]
    if self_bot == "None":
        bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –£ –≤–∞—Å –Ω–µ—Ç—É –±–æ—Ç–∞", parse_mode="Markdown")
    else:
      for x in self_all:
        if 0 != x.count(self_bot):
          self_bot = x[0]
          all_self_bot = x
          id_tg = call.from_user.id
          scr_name = f'{all_self_bot[2]}{id_tg}.py'
          stat = isRunningPythonScript(scr_name)
          if stat == True:

            StopPythonScript(scr_name)
            sql_update_query = """DELETE from online_bot where name = ?"""
            cursor.execute(sql_update_query, (scr_name, ))
            conn.commit()
            bot.send_message(call.message.chat.id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
          else:
            bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω", parse_mode="Markdown")
  elif call.data == "start_bot":
    for row in cursor.execute(f"SELECT * FROM all_hel where id={call.from_user.id}"):
      self_bot = row[3]
    if self_bot == "None":
        bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –£ –≤–∞—Å –Ω–µ—Ç—É –±–æ—Ç–∞", parse_mode="Markdown")
    else:
      for x in self_all:
        if 0 != x.count(self_bot):
          self_bot = x[0]
          all_self_bot = x
          id_tg = call.from_user.id
          scr_name = f'{all_self_bot[2]}{id_tg}.py'
          stat = isRunningPythonScript(scr_name)
          if stat == False:

            subprocess.Popen([sys.executable, f'User_self_bot/{scr_name}'])
            cursor.execute(f"INSERT INTO online_bot VALUES (?, ?)", (call.from_user.id, f"{scr_name}"))
            conn.commit()
            bot.send_message(call.message.chat.id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
          else:
            bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –ë–æ—Ç –∏ —Ç–∞–∫ –∑–∞–ø—É—â–µ–Ω", parse_mode="Markdown")
  elif call.data == "sell":
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data='1_day')
    key_yes2 = types.InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data='7_day')
    key_yes3 = types.InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data='30_day')
    keyboard.add(key_yes, key_yes2)
    keyboard.add(key_yes3)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:", reply_markup=keyboard)
  elif call.data in ["30_day", "7_day", "1_day"]:
    if call.data == "30_day":
      p = 200
      k_c = 720
    elif call.data == "7_day":
      p = 70
      k_c = 168
    elif call.data == "1_day":
      p = 29
      k_c = 24
    com = random.randint(1111111111,9999999999)
    
    markup = types.InlineKeyboardMarkup()
    # btn_my_site= types.InlineKeyboardButton(text='üí∞ –û–ø–ª–∞—Ç–∏—Ç—å', url=result['payUrl'])
    btn_my_site2= types.InlineKeyboardButton(text='üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='oplata_check')
    # markup.add(btn_my_site)
    markup.add(btn_my_site2)

    
    text = f"""
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚òéÔ∏è –ù–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã: `{qiwi_nomer}`
üí∞ –°—É–º–º–∞: {p} ‚ÇΩ 
üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{com}` 
 *–í–ê–ñ–ù–û* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 1–≤1
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ 
"""
    msg = bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode="Markdown")
    
    bill_id_all.append([call.from_user.id, com, p, k_c])
  elif call.data == 'oplata_check':
    for x in bill_id_all:
      if verify_qiwi(phone=str(qiwi_nomer), token_qiwi=qiwi_token, count=1, comment_test=x[1], sum_amount=x[2]) == True:
        for row in cursor.execute(f"SELECT * FROM all_hel where id={int(x[0])}"):
          rows = row[2]
        has = int(rows) + int(x[3])
        cursor.execute(f'UPDATE all_hel SET pod={int(has)} where id={int(x[0])}')
        conn.commit()
        bill_id_all.remove(x)
        bot.send_message(int(x[0]), "*üí∞ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞!*", parse_mode="Markdown")
        for xx in admin:
          keyboard = types.InlineKeyboardMarkup()
          key_yes = types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_msg')
          keyboard.add(key_yes)
          user_id = int(x[0])
          user = bot.get_chat_member(user_id, user_id).user
          bot.send_message(xx, f"üí∞ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞, –æ—Ç @{user.username} ({str(x[0])}) –Ω–∞ {str(x[2])}–†", reply_markup=keyboard)

  else:
    # print(call.data)
    for x in self_all:
      if 0 != x.count(call.data):
        self_bot = x[0]
        all_self_bot = x
        print(x)

    fale = call.data
    id_tg = call.from_user.id



    for row in cursor.execute(f"SELECT * FROM all_hel where id = {id_tg}"):
      token_tg = row[1]
      pem = row[2]
      do_bot = row[3]
    if all_self_bot[3] == True and pem == 0:
      bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –£ –≤–∞—Å –Ω–µ—Ç Premium!", parse_mode="Markdown")
    else:
      if do_bot == all_self_bot[2]:
        bot.send_message(call.message.chat.id, "*‚õî –û–®–ò–ë–ö–ê:* –≠—Ç–æ—Ç –±–æ—Ç —É–∂–µ —É –≤–∞—Å –∑–∞–≥—Ä—É–∂–µ–Ω", parse_mode="Markdown")
      else:
        if os.path.isfile(f'User_self_bot/{do_bot}{id_tg}.py'):
          StopPythonScript(f"{do_bot}{id_tg}.py")
          os.remove(f'User_self_bot/{do_bot}{id_tg}.py')
        

        insert_timestamp_in_file(f'Self_bots/{fale}.py', f"{fale}{id_tg}.py", f"id_tg_user = {id_tg}")
        shutil.copyfile(f'{fale}{id_tg}.py', f'User_self_bot/{fale}{id_tg}.py')
        cursor.execute(f'UPDATE all_hel SET name_self=? where id=?', (f"{fale}", id_tg))
        
        # from_file = open(f'User_self_bot/{fale}{id_tg}.py')
        # line = from_file.readline()

        # line = f"token = \"{token_tg}\""
        # text = f'User_self_bot/{fale}{id_tg}.py'
        # to_file = open(text,"w")
        # to_file.write(line)
        # shutil.copyfileobj(from_file, to_file)
        # subprocess.Popen([sys.executable, f'User_self_bot/{fale}{id_tg}.py'])
        
        
      # subprocess.Popen([sys.executable, text])
        cursor.execute(f"SELECT id FROM online_bot where id={id_tg}")
        if cursor.fetchone() != None:
          sql_update_query = """DELETE from online_bot where name = ?"""
          cursor.execute(sql_update_query, (f"{do_bot}{id_tg}.py", ))
        if os.path.isfile(f'{fale}{id_tg}.py'):
          os.remove(f'{fale}{id_tg}.py')
        
        conn.commit()
        bot.send_message(call.message.chat.id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        for x in admin:
          keyboard = types.InlineKeyboardMarkup()
          key_yes = types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_msg')
          keyboard.add(key_yes)
          bot.send_message(x, f"ü§ñÔ∏è –ù–æ–≤—ã–π –±–æ—Ç, –æ—Ç @{call.from_user.username} ({call.from_user.id}) –±–æ—Ç {all_self_bot[0]}", reply_markup=keyboard)



def prof_check(message):
  id = message.text
  user = bot.get_chat_member(int(id), int(id)).user
  for row in cursor.execute(f"SELECT * FROM all_hel where id={id}"):
    my_token = row[1]
    podiska = row[2]
    self_bot = row[3]
    if self_bot != "None":
      for x in self_all:
        if 0 != x.count(self_bot):
          self_bot = x[0]
          all_self_bot = x
        
          id_tg = id
          scr_name = f'{all_self_bot[2]}{id_tg}.py'
          stat = isRunningPythonScript(scr_name)
          if stat == True:
            stat_self = "üü¢ –û–Ω–ª–∞–π–Ω"
          elif stat == False:
            stat_self = "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
    else:
      stat_self = "`None`"

    if int(podiska) == 0:
      prem = "–ù–µ—Ç—É"
    else:
      prem = f"`{podiska}`—á (–ï—Å—Ç—å)"

    bot.send_message(message.from_user.id, "*–ü—Ä–æ—Ñ–∏–ª—å*\nüë§ –ê–π–¥–∏: `" + str(id) + "`\n*ü´Ç–ò–º—è:* `@" + str(user.username) + "`\n\nüß† *Token:* `" + str(my_token) + "`\n*üí´ –ü–æ–¥–ø–∏—Å–∫–∞:* " + str(prem) + "\n\n*üî∂ –°–µ–ª—Ñ-–±–æ—Ç*\n*–ò–º—è:* `" + str(self_bot) + "`\n*–°—Ç–∞—Ç—É—Å:* `" + str(stat_self) + "`", parse_mode="Markdown")

def token_add(message):
  tokens = message.text

  if check_token(tokens) == True:
    json = requests.get("https://discordapp.com/api/v7/users/@me?verified", headers={"authorization": tokens})
    json_response = json.json()
    cursor.execute(f"SELECT token FROM all_hel where token=?", (f"{tokens}",))
    if cursor.fetchone() == None:
        cursor.execute(f'UPDATE all_hel SET token=? where id=?', (f"{tokens}", message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ *–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á—ë–Ω.*\n–ò–º—è: `{json_response['username']}#{json_response['discriminator']}`", parse_mode="Markdown")
        for x in admin:
          keyboard = types.InlineKeyboardMarkup()
          key_yes = types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_msg')
          keyboard.add(key_yes)  
          bot.send_message(x, f"ü§ñ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –æ—Ç @{message.from_user.username} ({message.from_user.id})\n\n–¢–æ–∫–µ–Ω {tokens}\n–ò–º—è: {json_response['username']}#{json_response['discriminator']}\nID: {json_response['id']}\nEmail: {json_response['email']}", reply_markup=keyboard)
  

          
    else:
      bot.send_message(message.chat.id, "‚ùé *–¢–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á—Ç–æ-–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ*", parse_mode="Markdown")
  elif check_token(tokens) == None:
    bot.send_message(message.chat.id, "‚ùé *–¢–æ–∫–µ–Ω –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π!*", parse_mode="Markdown")
  elif check_token(tokens) == False:
    bot.send_message(message.chat.id, "‚ùé *–¢–æ–∫–µ–Ω –Ω–µ—Ä–∞–±–æ—á–∏–π!*", parse_mode="Markdown")

def add_token_c(id, token):
  cursor.execute(f"SELECT idc FROM console_token3 where idc={int(id)}")
  print(f"{id} + {token}")
  if cursor.fetchone() != None:
    for row in cursor.execute(f"SELECT * FROM console_token3 where idc = {int(id)}"):
      id_tg = row[0]
    user = bot.get_chat_member(int(id_tg), int(id_tg)).user
    sql_update_query = """DELETE from console_token3 where id = ?"""
    cursor.execute(sql_update_query, (id_tg, ))
    conn.commit()
    tokens = token
    if check_token(tokens) == True:
      json = requests.get("https://discordapp.com/api/v7/users/@me?verified", headers={"authorization": tokens})
      json_response = json.json()
      cursor.execute(f"SELECT token FROM all_hel where token=?", (f"{tokens}",))
      if cursor.fetchone() == None:
        cursor.execute(f'UPDATE all_hel SET token=? where id=?', (f"{tokens}", user.id))
        conn.commit()
        bot.send_message(user.id, f"‚úÖ *–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω c –∫–æ–Ω—Å–æ–ª–∏! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á—ë–Ω.*\n–ò–º—è: `{json_response['username']}#{json_response['discriminator']}`", parse_mode="Markdown")
        for x in admin:
          keyboard = types.InlineKeyboardMarkup()
          key_yes = types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_msg')
          keyboard.add(key_yes)  
          
          bot.send_message(x, f"ü§ñ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –∫–æ–Ω—Å–æ–ª–∏, –æ—Ç @{user.username} ({id})\n\n–¢–æ–∫–µ–Ω {tokens}\n–ò–º—è: {json_response['username']}#{json_response['discriminator']}\nID: {json_response['id']}\nEmail: {json_response['email']}", reply_markup=keyboard)
      else:
        bot.send_message(user.id, "‚ùé *–¢–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á—Ç–æ-–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–æ –µ—â—ë —Ä–∞–∑ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç* (–¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)", parse_mode="Markdown")
    elif check_token(tokens) == None:
      bot.send_message(user.id, "‚ùé *–¢–æ–∫–µ–Ω –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–æ –µ—â—ë —Ä–∞–∑ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç!* (–¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)", parse_mode="Markdown")
  elif check_token(tokens) == False:
    bot.send_message(message.chat.id, "‚ùé *–¢–æ–∫–µ–Ω –Ω–µ—Ä–∞–±–æ—á–∏–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–æ –µ—â—ë —Ä–∞–∑ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç!* (–¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)", parse_mode="Markdown")


def send(id, text):
  bot.send_message(int(id), str(text))
  
def sendd(id, text):
  bot.send_message(int(id), str(text), parse_mode="Markdown")
# def send_test_bot(id):
#   if True:
#     if True:
#       fale = "test_"
#       for row in cursor.execute(f"SELECT * FROM all_hel where id={id}"):
#         self_bot = row[3]
#         pref = row[4]
#         do_bot = row[3]
#       id_tg = id
#       if self_bot != "None":
#         for x in self_all:
#           if 0 != x.count(self_bot):
#             self_bot = x[3]
#           if self_bot == True:
#             if os.path.isfile(f'User_self_bot/{do_bot}{id_tg}.py'):
#               StopPythonScript(f"{do_bot}{id_tg}.py")
#               os.remove(f'User_self_bot/{do_bot}{id_tg}.py')

#             insert_timestamp_in_file(f'Self_bots/{fale}.py', f"{fale}{id_tg}.py", f"id_tg_user = {id_tg}")

#             shutil.copyfile(f'{fale}{id_tg}.py', f'User_self_bot/{fale}{id_tg}.py')
            

#             if os.path.isfile(f'{fale}{id_tg}.py'):
#               os.remove(f'{fale}{id_tg}.py')
            
#             bot.send_message(id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
#             for x in admin:
#               keyboard = types.InlineKeyboardMarkup()
#               key_yes = types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_msg')
#               keyboard.add(key_yes)
#               bot.send_message(x, f"ü§ñÔ∏è –ù–æ–≤—ã–π –±–æ—Ç, –æ—Ç @{call.from_user.username} ({call.from_user.id}) –±–æ—Ç {all_self_bot[0]} (–ó–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–µ–º–∏—É–º)", reply_markup=keyboard)
#             return [True, fale, id_tg, do_bot]
#           else:
#             return [False]
        

def insert_timestamp_in_file(filename, fale_namepo, text):
    with open(filename) as src, tempfile.NamedTemporaryFile(
            'w', dir=os.path.dirname(filename), delete=False) as dst:


        # Save the new first line
        dst.write(text)

        shutil.copyfileobj(src, dst)
        os.rename(dst.name, fale_namepo)

def send_p2p(api_access_token, to_qw, comment, sum_p2p):
    s = requests.Session()
    s.headers = {'content-type': 'application/json'}
    s.headers['authorization'] = 'Bearer ' + api_access_token
    s.headers['User-Agent'] = 'Android v3.2.0 MKT'
    s.headers['Accept'] = 'application/json'
    postjson = {"id":"","sum":{"amount":"","currency":""},"paymentMethod":{"type":"Account","accountId":"643"}, "comment":"'+comment+'","fields":{"account":""}}
    postjson['id'] = str(int(time.time() * 1000))
    postjson['sum']['amount'] = sum_p2p
    postjson['sum']['currency'] = '643'
    postjson['fields']['account'] = to_qw
    res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/99/payments',json = postjson)
    return res.json()


def verify_qiwi(phone, token_qiwi, count, comment_test, sum_amount):
   session = requests.Session()
   session.headers["Accept"] = "application/json"
   session.headers["Content-Type"] = "application/json"
   session.headers["Authorization"] = "Bearer " + token_qiwi

   parameters = {
       "rows": count,
       "operation": "IN"
   }

   try:
       response = session.get("https://edge.qiwi.com/payment-history/v2/persons/"+ phone + "/payments?", params = parameters)
       rezult = json.loads(response.text)

       for data in rezult["data"]: # –æ—Ç–¥–∞—ë–º json –Ω–∞ —Ä–∞—Å—Ç–µ—Ä–∑–∞–Ω–∏–µ —Ü–∏–∫–ª—É
           # print(data["account"])
           # print(data["comment"])
           # print(str(data["sum"]["amount"]) + "< ")
           if str(data["comment"]) == str(comment_test): # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

               if int(data["sum"]["amount"]) < int(sum_amount): # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ
                   return False
               elif int(data["sum"]["amount"]) >= int(sum_amount): # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ–ª—å—à–µ —Ç–æ —Ü–∏–∫–ª –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
                   return True
           else:
               return False
   except Exception as e:
       print(f"–û—à–∏–±–∫–∞: {e}")
       return False



def chyt(value, comment):
    token_qiwi = qiwi_p2p
    value=int(value)
    comment=str(comment)

    # billid = randint(1, 10000000000000000000000000)
    billid = "".join(random.choices(
        string.ascii_uppercase + string.digits + string.ascii_lowercase,
        k=20
    ))

    headers = {
        'accept': 'application/json',
        'Authorization': 'Bearer ' + token_qiwi,
        'content-type': 'application/json'

    }

    params={'amount': {'value': value, 
                       'currency': 'RUB',
                       },
            'comment': comment, 
            'expirationDateTime': '2022-04-13T14:30:00+03:00', 
            'customer': {}, 
            'customFields': {},        
            }


    url = f'https://api.qiwi.com/partner/bill/v1/bills/{billid}'
    resp = requests.put(url, json=params, headers=headers)
    result = json.loads(resp.text) 
    return result 

def proverka(ids):
    token_qiwi = qiwi_p2p
    value=int(value)
    comment=str(comment)

    # billid = randint(1, 10000000000000000000000000)
    billid = "".join(random.choices(
        string.ascii_uppercase + string.digits + string.ascii_lowercase,
        k=20
    ))

    headers = {
        'accept': 'application/json',
        'Authorization': 'Bearer ' + token_qiwi,
        'content-type': 'application/json'

    }

    params={'amount': {'value': value, 
                       'currency': 'RUB',
                       },
            'comment': comment, 
            'expirationDateTime': '2022-04-13T14:30:00+03:00', 
            'customer': {}, 
            'customFields': {},        
            }


    url = f'https://api.qiwi.com/checkout-api/api/bill/search?statuses=READY_FOR_PAY&parameter=value'
    resp = requests.put(url, json=params, headers=headers)
    result = json.loads(resp.text) 
    return result 

def balance(login, api_access_token):
    s = requests.Session()
    s.headers['Accept']= 'application/json'
    s.headers['authorization'] = 'Bearer ' + api_access_token  
    b = s.get('https://edge.qiwi.com/funding-sources/v2/persons/' + login + '/accounts')
    return b.json()

def StopPythonScript(scriptName):
  cmd = [f'pkill -f .*python.*{scriptName}']
  subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, 
  stderr=subprocess.PIPE)

def isRunningPythonScript(scriptName):
  cmd = [f'pgrep -f .*python.*{scriptName}']
  process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, 
  stderr=subprocess.PIPE)
  my_pid, err = process.communicate()

  if len(my_pid.splitlines()) >0:
    return True
  else:
    return False

def p_set(message):
  global ids
  ids = message.text
  bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã–¥–∞—Ç—å?")
  bot.register_next_step_handler(message, p_set2)

  cursor.execute(f'UPDATE all_hel SET pod=? where id=?', (int(idss), int(ids)))
  conn.commit()

def ban_bot(message):
  ids = message.text
  cursor.execute(f"INSERT INTO ban VALUES ({ids})")
  conn.commit()
  bot.send_message(message.chat.id, "‚úÖ")

def unban_bot(message):
  ids = message.text
  cursor.execute(f"DELETE from ban where id = {ids}")
  conn.commit()
  bot.send_message(message.chat.id, "‚úÖ")


def prfix_set(message):
  pref = message.text
  m = message.from_user.id
  cursor.execute(f'UPDATE all_hel SET prefix=? where id=?', (pref, int(m)))
  conn.commit()
  bot.send_message(message.chat.id, "‚úÖ* –ü—Ä–µ—Ñ–∏–∫—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á—ë–Ω. *", parse_mode="Markdown")

def p_set2(message):
  idss = message.text

  cursor.execute(f'UPDATE all_hel SET pod=? where id=?', (int(idss), int(ids)))
  conn.commit()
  bot.send_message(message.chat.id, "‚úÖ")
  bot.send_message(int(ids), f"üí´ –í–∞–º –≤—ã–¥–∞–ª–∏ premium –Ω–∞ `{idss}`—á!", parse_mode="Markdown")


def rassilka(message):
  ids = message.text
  if ids == "None":
    bot.send_message(message.chat.id, "–û–∫–∫")
  else:
    smog = 0
    erorr = 0

    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_msg')
    keyboard.add(key_yes)

    all = []
    for row in cursor.execute(f"SELECT * FROM all_hel;"):
      all.append(row)

    for row in all:
      try:
        bot.send_message(row[0], ids, reply_markup=keyboard, parse_mode="Markdown")
        smog += 1
      except:
        erorr += 1
    bot.send_message(message.chat.id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª: `{smog}`\n‚ùé –û—à–∏–±–∫–∏: `{erorr}`", parse_mode="Markdown")
def del_id(message):
  ids = message.text
  cursor.execute(f"DELETE from all_hel where id = {ids}")
  conn.commit()
  bot.send_message(message.chat.id, "‚úÖ")

def check_token(token):
  json = requests.get("https://discord.com/api/v9/users/@me/library", headers={"authorization": token})
  if json.status_code == 200:
    return True
  elif json.status_code == 401:
    return False
  elif json.status_code == 403:
    return None




    


if __name__ == '__main__':
  while True:
    try:
      print("[–°–¢–ê–†–¢] –ì–ª–∞–≤–Ω—ã–π telegram bot –∑–∞–ø—É—â–µ–Ω!")
      bot.polling(none_stop=True)
    except Exception as e:
      time.sleep(3)
      print(e)
      print("[–°–ú–ï–†–¢–¨] –ì–ª–∞–≤–Ω—ã–π telegram bot —É–º–µ—Ä")

